from sqlalchemy import create_engine, select
from sqlalchemy.orm import sessionmaker
from datetime import datetime
from .sql_model import Base, Country, ExchangeRequest, ExchangeRate


class SQL:
    def __init__(self) -> None:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        URL_DATABASE_LOCAL = "postgresql://postgres:1253@localhost:5432/exchange_bot_DB"

        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:")
        print(repr(URL_DATABASE_LOCAL))

        self.engine = create_engine(
            URL_DATABASE_LOCAL,
            connect_args={"client_encoding": "utf8"}
        )

        self.Session = sessionmaker(bind=self.engine)
        Base.metadata.create_all(bind=self.engine)

    # ---------- –ë–ê–ó–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò ----------

    def add_country(self, country: Country) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã."""
        with self.Session() as session:
            session.add(country)
            session.commit()

    def add_request(self, request: ExchangeRequest) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
        with self.Session() as session:
            session.add(request)
            session.commit()

    def add_exchange_rate(self, obj: ExchangeRate):
        with self.Session() as session:
            session.add(obj)
            session.commit()

    # ---------- –ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• ----------

    def get_all_countries(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω."""
        with self.Session() as session:
            return session.query(Country).all()

    def get_country_by_name(self, name: str):
        """–ù–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        with self.Session() as session:
            stmt = select(Country).where(Country.name == name)
            result = session.execute(stmt).scalar_one_or_none()
            return result

    def get_all_requests(self, limit: int = 50):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
        with self.Session() as session:
            stmt = select(ExchangeRequest).order_by(ExchangeRequest.id.desc()).limit(limit)
            return session.execute(stmt).scalars().all()

    # ---------- –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ ----------

    def seed_countries(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–∞–Ω —Å —ç—Ç–∞–ª–æ–Ω–Ω—ã–º —Å–ª–æ–≤–∞—Ä—ë–º."""
        with self.Session() as session:
            # –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ç—Ä–∞–Ω
            data = {
                "–†–û–°–°–ò–Ø": {
                    "code": "RU",
                    "currencies_from_crypto": ["USDT", "BTC", "ETH"],
                    "currencies_from_fiat": ["RUB"],
                    "cities": ["–ú–æ—Å–∫–≤–∞", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥"]
                },
                "–°–®–ê": {
                    "code": "US",
                    "currencies_from_crypto": ["USDT", "BTC", "ETH"],
                    "currencies_from_fiat": ["USD"],
                    "cities": ["New York", "Los Angeles", "Houston"]
                },
                "–ü–û–õ–¨–®–ê": {
                    "code": "PL",
                    "currencies_from_crypto": ["USDT", "ETH"],
                    "currencies_from_fiat": ["USD", "EUR"],
                    "cities": ["–í–∞—Ä—à–∞–≤–∞", "–ë–µ–ª–æ—Å—Ç–æ–∫", "–ü–ª–æ—Ü–∫", "–†–∞–¥–æ–º"]
                }
            }

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ –ë–î
            existing_countries = {c.name: c for c in session.query(Country).all()}

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º
            for name, info in data.items():
                if name in existing_countries:
                    country = existing_countries[name]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å
                    if (
                            country.code != info["code"] or
                            country.currencies_from_crypto != info["currencies_from_crypto"] or
                            country.currencies_from_fiat != info["currencies_from_fiat"] or
                            country.cities != info["cities"]
                    ):
                        country.code = info["code"]
                        country.currencies_from_crypto = info["currencies_from_crypto"]
                        country.currencies_from_fiat = info["currencies_from_fiat"]
                        country.cities = info["cities"]
                        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {name}")
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
                    new_country = Country(
                        name=name,
                        code=info["code"],
                        currencies_from_crypto=info["currencies_from_crypto"],
                        currencies_from_fiat=info["currencies_from_fiat"],
                        cities=info["cities"]
                    )
                    session.add(new_country)
                    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {name}")

            # –£–¥–∞–ª—è–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
            for name in existing_countries:
                if name not in data:
                    session.delete(existing_countries[name])
                    print(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {name}")

            session.commit()
            print("‚úÖ –°—Ç—Ä–∞–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å –±–∞–∑–æ–π")

    def clear_requests(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏"""
        with self.Session() as session:
            deleted = session.query(ExchangeRequest).delete()
            session.commit()
            print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {deleted}")
