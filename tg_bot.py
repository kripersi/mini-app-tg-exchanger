import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, WebAppData
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from config import TG_API_KEY, ADMINS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TG_API_KEY, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(F.text == "/start")
async def start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url="https://oogenetic-factiously-joycelyn.ngrok-free.dev/")
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                         reply_markup=builder.as_markup())


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º
async def notify_admins(data):
    try:
        user = data.get("user", {})
        text = (
            f"<b>üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
            f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {data.get('country')}\n"
            f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {data.get('city')}\n"
            f"üí± <b>–û–±–º–µ–Ω:</b> {data.get('give_currency')} ‚Üí {data.get('get_currency')}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {data.get('datetime')}\n\n"
            f"üë§ <b>–§–ò–û:</b> {data.get('fullname')}\n"
            f"üìß <b>Email:</b> {data.get('email')}\n"
            f"üßë‚Äçüíª <b>Telegram:</b> @{user.get('username') or user.get('first_name') or '‚Äî'} "
            f"(ID: {user.get('id')})"
        )
        for admin_id in ADMINS:
            await bot.send_message(chat_id=admin_id, text=text)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
